<p>
<i>当記事は<a href="https://adventar.org/calendars/7447">RICORA Advent Calendar 12/5</a>の記事です。</i>
</p>

<h2>背景</h2>

<p>
近日、「<i>天狗君は何千行ものvimrcを書いているイメージがあった</i>」と言われることがあった。
</p>

<p>
私は、最小限・最低限を好む性格ゆえに、それほど設定を凝ることはない。
従って、相手の勘違いではあるのだが。
確かにvimを普段遣いできるようになれば、編集効率が上がるに違いないと思った。
</p>

<p>
ということで、これを機に今更Vimに入門しようと思う。
とはいえ、初歩的な操作の解説は山ほどネット上に存在するため、ここではもう少しテクニカルなものを紹介する。
</p>

<h2>Vimの理念</h2>

<p>
私の感じたVimの理念とは、「ホームポジションを崩さない・そいでいて強力に編集できる」ことであり、否定されないはずである。
</p>

<p>
一般的なキーボードでは、カーソルやESCキーは遠い。
そして、マウスはもっと遠い。
Vimは、これを克服するように、物理的に範囲の狭いキーのみでも動作するようキーバインディングし、また数多くのショートカットキーを持つ。
このショートカットキーの多さが挫折の原因にはなるが、同様の原因を持つBlenderとは異なり、最低限覚えるべきショートカットキーは極めて少ない。
</p>

<p>
例えば、現在のカーソルから行末までを削除するとする。<br>
VSCodeでは、Shiftを押しながらEndキーを押して行末まで選択し、Backspaceで削除する。<br>
一方Vimでは、d$を入力するだけである。
</p>

<p>
例えば、「// !debug」とコメントされた行をすべてコメントアウトするとする。<br>
VSCodeでは、地道に一行ずつ行頭に「//」を挿入する他ない。<br>
一方Vimでは、:g/\\/\\/ !debug/norm I// を実行して実現できる。
これは、globalコマンドを少し悪用した荒業である。
</p>

<p>
なんにせよ、豊富なショートカット、豊富なコマンドにより、Vimは快適な操作と強力な編集力を提供している。
あとは、いかに早く「慣れる」かであろう。
</p>

<h2>同時編集</h2>

<p>
複数ファイルを編集するには、画面分割とタブの主に二つの方法がある。
</p>

<p>
画面分割には以下のコマンドを用いる。ただし、:e <file>でファイルを開ける。
</p>

<ul>
<li>上下に分割：Ctrl+w s</li>
<li>左右に分割：Ctrl+w v</li>
<li>画面を移動：Ctrl+w w</li>
</ul>

<div class="images"><img src="./img/vimstart-img01.png" width="60%"></img></div>

<p>
タブを使う場合は以下のコマンドを用いる。
</p>

<ul>
<li>タブを生成：:tabe　(開くファイル名を指定できる)</li>
<li>タブを移動：:tabn</li>
</ul>

<div class="images"><img src="./img/vimstart-img02.png" width="60%"></img></div>

<h2>ターミナル</h2>

<p>
:termコマンドで画面分割してターミナルを開ける。
通常は上下に分割されるが、左右に分割したい場合は:vert termを実行する。
その後の操作は画面分割と同様である。
</p>

<p>
:termの引数にターミナル用のコマンドを指定して実行できる。
例えば「:term make」とすると、カレントディレクトリでmakeを実行する。
結果は、画面分割されて表示される。
</p>

<div class="images"><img src="./img/vimstart-img03.png" width="60%"></img></div>

<h2>プロジェクトごとのvimrc</h2>

<p>
プロジェクトルートに.localvimrcを置き、~/.vimrcに次を加えて実現する。
</p>

<pre class="prettyprint">let s:localvimrc = findfile(".localvimrc", getcwd() . ';')
if s:localvimrc != ""
source \`=s:localvimrc\`
endif</pre>

<p>
プロジェクトごとにvimrcを使い分けたいと思わないのか、解説記事が少ない。
実際は、単に.localvimrcを上方検索して、存在すればsourceで適用するだあけである。
ただし、source s:localvimrcではならない。
なぜならばsourceはシンボルそのままを参照するからである。
</p>

<h2>ハイライト</h2>

<p>
VSCodeで独自のシンタックスハイライトを作るのは、非常に面倒くさい。
一方、Vimはsyntaxコマンドにより簡単に実現できる。
例えば、「;」から行末をコメントとしてハイライトする場合、次を実行すればいい。
</p>

<pre class="prettyprint">syntax match Comment /;.*\\n/</pre>

<p>
Commentというシンタックスグループを、正規表現にマッチする文と定義しているだけである。
このCommentグループは、標準で色設定されているグループである。
独自言語をハイライトするだけならば、自分で色設定する必要はないであろう。
</p>

<p>
色設定はhighlightコマンドで行う。
例えば、set listにより有効化される非表示文字のハイライトでは、タブ文字や行末の空白はSpecialKeyというグループに分類されている。
この色をIgnoreグループと同じ色に設定する場合、次を実行する。
</p>

<pre class="prettyprint">highlight link SpecialKey Ignore</pre>

<h2>autocmd</h2>

<p>
通常、~/.vimrcないし~/.vimrc読み込み時に読み込まれるvimscriptは、vimを起動した時にしか読み込まれない。
従って、開いたファイルの拡張子に合わせてsyntaxを羅列しても、:e等で新しくファイルを開いたとき、それらコマンドは実行されない。
</p>

<p>
これを解決するため、auatocmdコマンドを用いる。
例えば、拡張子がstrであるファイルが開かれたときにsyntaxを実行する場合は、次のように記す。
</p>

<pre class="prettyprint">autocmd BufNewFile,BufRead *.str syntax match Comment /;.*\\n/</pre>

<p>
autocmdは実行される度に<b>重複せずに</b>追加される。
例えば、autocmd BufNewFile * echo 'hoge'を実行する。
新しいファイルを開くと「hoge」と表示される。
ここで同じautocmdコマンドを実行する。
新しいファイルを開くと、二度「hoge」と表示される。
</p>

<p>
二度同じautocmdコマンドを手打ちで実行することも、二度同じvimscriptをsourceで読み込むこともないであろう。
しかし、誤って重複した場合、それが何百と重複した場合、パフォーマンスに影響が出るため、この問題を解決したい。
</p>

<p>
これは、autocmd!コマンドとaugroupにより安全に解決される。
原理は、autocmd!によりautocmdを削除してからautocmdを実行すれば重複しない、というものである。
しかし、予期しないautocmdを削除する可能性がある。
そのため、augroupによりautocmdをグループ分けし、そのグループに対してautocmd!を行えばいい。
例えば、次のようにすればいい。
</p>

<pre class="prettyprint">augroup hoge_group
autocmd!
autocmd BufNewFile * echo 'hoge'
augroup END</pre>

<h2>おわりに</h2>

<p>
hjklでのカーソル移動はノーマルモード限定であるため、つい編集モード中にカーソルキーを押してしまう癖が抜けない。
飛鳥の巌戸よろしく、意識してCtrl+[を押す練習をした方がいいかもしれない。
</p>

<p>
早いところ言語サーバーについて調べようと思う。
</p>
