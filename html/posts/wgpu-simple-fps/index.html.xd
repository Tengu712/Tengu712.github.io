<!DOCTYPE html>
<html lang="ja">

<head>
  <CHeader />
  <PostTitle key="wgpu-simple-fps" />
</head>

<CBody>
  <Headline key="wgpu-simple-fps" />

  <hr>

  <h2>概要</h2>

  <p>
    本記事はWebGPU及び<a href="https://github.com/gfx-rs/wgpu">wgpu</a>の解説記事ではない。
    そして、FPSゲームの制作方法の解説記事でもない。
    wgpuを用いてFPSゲームを作ったときの所感や苦労を書き連ねた記事である。
  </p>

  <p>
    この頃、3DCGを用いそうなゲームの開発環境について悩むことが多かった。
    経験したことのあるそれぞれの環境について、次のように考えていた。
  </p>

  <ul>
    <li>Unreal Engine：綺麗だが重い。ブループリント。GUIベース。ライセンス問題。</li>
    <li>Unity：GUIベース。ライセンス問題。Linuxでは作れないっぽい？</li>
    <li>OpenSiv3D：C++。</li>
    <li>LWJGL：悪くないがなんだかな(Java良い言語なんだけどJVMを挟むからパフォーマンスが……)。</li>
    <li>Direct3D11以前：Windowsのみ対応。他OSで動かすつもりがないなら至高の選択肢。</li>
    <li>Direct3D12：Windowsのみ対応。実装が重い。ならVulkanで良い。</li>
    <li>OpenGL：もう古い。Windowsのサポートが古いはず。</li>
    <li>Vulkan：マルチプラットフォームにするなら至高の選択肢。実装が重い。</li>
    <li>Metal：macOSのみ対応。実装が重いらしい。</li>
    <li>WebGL2：Webブラウザ向けのAPI。それで良いなら(どうせパフォーマンスは求めないし)至高の選択肢。JavaScript系。</li>
  </ul>

  <p>
    WebGPUに対しては次のように考えていた。
  </p>

  <ul>
    <li>実装が重い</li>
    <li>Webブラウザしか動かないならWebGL2で良い</li>
    <li>JavaScript系</li>
    <li>抽象レイヤーを介すから重い</li>
  </ul>

  <p>
    しかし、実際に使ってみて、次のように考えが変わった。
    他にも色々思ったことがあるため、以降の章で随時書く。
  </p>

  <ul>
    <li>wgpuというWebGPU実装をそのまま使える</li>
    <li>スタンドアロンで使える</li>
    <li>実装が重過ぎない</li>
    <li>マルチプラットフォームなら至高の選択肢</li>
  </ul>

  <div style="text-align: center;">
    <a href="https://github.com/Tengu712/wgpu-simple-fps">ソースコードはこちら</a>
  </div>



  <h2>Rust及びwinit所感</h2>

  <p>
    そもそもwgpuはRust製であるため、Rustを主要使用言語に選べる。
    私はRustが好きであるため、ありがたくRustを使った。
    しかし、OOPをサポートしないRustでのゲーム開発には無理があるなと感じた。
    次の点である。
  </p>

  <ul>
    <li>ポリモーフィズムがないのでmatchで静的ディスパッチする必要がある</li>
    <li>所有権の問題で構造体のメンバを更新して再代入することができない</li>
    <li>オブジェクト指向っぽくモジュールを分けるとファイル構造が汚くなる</li>
  </ul>

  <p>
    ウィンドウを作成するためにwinit 0.30を用いた。
    winitは0.29から0.30に変わるときに、かなり大きく仕様を変更した。
    しかし、ほぼ殆どすべての参考記事ではwinit 0.29が用いられており、winit 0.30の仕様も手伝ってかなり苦労した。
    次の点である。
  </p>

  <ul>
    <li>非同期にウィンドウ生成するため初めにウィンドウハンドルを得ることができない</li>
    <li>非同期にウィンドウ生成するためライフタイム管理が面倒くさい</li>
    <li>正常に動作しないメソッドがある(WindowAttributes::with_enabled_buttons, WindowAttributes::with_cursor)</li>
  </ul>



  <h2>WebGPU(wgpu)所感</h2>

  <p>
    まず、相変わらずサンプルプログラムが貧弱だなとも思った。
    一つのポリゴンしか描かないとか、一つのシェーダしか使わないとか、カメラもポリゴンも動かないとか、そんなんじゃまともなアプリケーションは作れまい。
    ただ、Web系の技術であるからか、Vulkanよりは多いようにも感じた。
    このまま振興して、より丁寧で実践的な解説が増えてくれるとありがたい。
  </p>

  <p>
    左手座標系であることに驚いた。
    XxYxZが[-1,1]x[-1,1]x[0,1]である。
    WindowsでのデフォルトバックエンドがVulkanであるのに、Direct3Dと同じ座標系を採用したのは何のためであろうか。
  </p>

  <p>
    また、頂点入力バッファにインスタンシングのためのバッファを設けられるようだが、最大float32x4単位で渡さなければならないことに驚いた。
    座標変形行列を渡したい場合は4個に分けて渡さなければならない。
    メリットがないように感じたたため、ユニフォームバッファとして渡すのが良いだろう。
  </p>

  <p>
    BindGroupの意義がわからなかった。
    どうせすべてのグループのすべてのバインディングに値が入っている必要があるので、すべて同じグループでも良いはずである。
    カメラとサンプラを分けるといった、役割の異なるバインディングを異なるグループに分けるコードも見かけたが、メリットがないように感じた。
  </p>

  <p>
    また、少なくともGPUを積んでいないノートPC(Windows)のバックエンドをVulkanにすると垂直同期が取られなかった。
    少なくともUbuntu 24.04のマシン(NVIDIA RTX 3060)では非常に重くなった。
  </p>



  <h2>球の作成</h2>

  <p>
    素材を使っても良かったが、球体モデルを自作した。
    ほぼ殆どこの<a href="https://shibuya24.info/entry/unity-mesh-dynamic-sphere">参考文献</a>から流用したが、次のようなアルゴリズムである。
  </p>

  <ul>
    <li>
      頂点位置
      <ul>
        <li>緯度方向・経度方向に領域を分割する</li>
        <li>原点からの角度・距離に従って位置をプロットする</li>
        <li>ただし、UV展開の都合上赤道上の頂点は二重にプロットする</li>
      </ul>
    </li>
    <li>法線ベクトルは頂点位置ベクトルの単位ベクトル</li>
    <li>UV座標は北半球・南半球に分割して年輪のようにプロットする</li>
    <li>
      インデックス
      <ul>
        <li>北極点・南極点を含むインデックスをよしなに結ぶ</li>
        <li>上の辺・下の辺それぞれの上の頂点をよしなに結ぶ</li>
        <li>ただし、一周するとインデックスが循環することに注意する</li>
        <li>また、赤道上の頂点は結ばないようにする(UV座標が飛ぶため意図しない色が乗る)</li>
      </ul>
    </li>
  </ul>

  <p>
    次のように期待通りのモデルが生成できた。
  </p>
  
  <CImage src="https://img.skdassoc.work/posts/wgpu-simple-fps/sphere.png" caption="作成した球体モデル" width="80%" />



  <h2>壁の当たり判定</h2>

  <p>
    WebGPUとは全く関係ないが、FPSゲームを作るにあたって、壁の当たり判定の実装に苦労した。
    次のように解決した。
  </p>

  <ol>
    <li>壁(直方体)のx-y平面上の4点の座標を得る</li>
    <li>その4点を外側に1ずつ移動する</li>
    <li>その4点に直方体の回転を適応する</li>
    <li>その4点におけるプレイヤーの座標の内外判定(ベクトルの回転方向を見る)を行う</li>
  </ol>



  <h2>参考文献</h2>

  <ul>
    <li><a href="https://toji.dev/webgpu-best-practices/bind-groups.html">WebGPU Bind Group best practices</a></li>
    <li><a href="https://note.com/usubazzz/n/nd2e241e2d1c3">クォータニオンによるキャラクターの制御メモ</a></li>
    <li><a href="https://shibuya24.info/entry/unity-mesh-dynamic-sphere">【Unity】プログラミングで球メッシュを作る方法</a></li>
    <li><a href="https://qiita.com/zu_rin/items/09876d2c7ec12974bc0f">2線分の交点座標(2次元)</a></li>
    <li><a href="http://marupeke296.com/COL_3D_No16_MoveShereAndSepLine.html">ゲームつくろー 衝突判定編 3D衝突編 その16 直線と移動する球の衝突場所と時刻を得る</a></li>
  </ul>



  <Tombstone />

  <hr>

  <Deadline key="wgpu-simple-fps" />
</CBody>

</html>
