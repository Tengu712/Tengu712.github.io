<!DOCTYPE html>
<html lang="ja">

<head>
  <CHeader />
  <PostTitle key="cppcli-invoke-deadlock" />
</head>

<CBody>
  <Headline key="cppcli-invoke-deadlock" />

  <hr>

  <h2>概要</h2>

  <p>
    当記事は、.NETのフォームのスレッド周りを理解していなかったがゆえに起こったデッドロックを解説する。
  </p>

  <h2>プログラム</h2>

  <p>
    職場では、C++/CLIでWindowsアプリケーションを開発している。
    なぜC#ではなくC++であるのかといえば、恐らく、多くの外部ライブラリを用いているために、FFIシグネチャを書くのが面倒だからだろう。
  </p>

  <p>
    次のようなプログラムを実装することになった。
  </p>

  <ul>
    <li>MainWindowが最小化されたとき、ChildWindowを開く</li>
    <li>MainWindowが最小化を解除されたとき、ChildWindowを閉じる</li>
    <li>Appは不定期的に、ChildWindowを更新する</li>
    <li>AppとMainWindowは別スレッドである</li>
  </ul>

  <p>
    シーケンス図を描くと、次のようになる。
  </p>

  <CImage src="https://img.skdassoc.work/posts/cppcli-invoke-deadlock/01.svg" caption="シーケンス図" width="70%" />

  <p>
    AppとMainWindowは別スレッドであるため、排他制御が必要である。
    排他制御にはmutexとlock_guardを用いる。
  </p>

  <p>
    また、.NETのフォームは、別スレッドから変更を加えられない。
    従って、AppからChildWindowを更新するときは、Invokeを用いる。
  </p>

  <p>
    C++/CLIではアンマネージ型はマネージ型の参照をメンバとして持てない。
    解決策として、以下の方法がある。
    今回は、少々気持ち悪いが、二つ目の解決策を採用する。
  </p>

  <ul>
    <li>MainWindowがChildWindowの生成・破棄を行い、AppはdelegateでChildWindowのコールバックを持つ</li>
    <li>AppがChildWindowの生成・破棄を行い、MainWindowはAppを介してChildWindowを制御する</li>
  </ul>

  <p>
    コードは、次のようになる。
  </p>

  <details>
    <summary>main.cpp</summary>
    <Codeblock lang="C++">#include "MainWindow.hpp"

#include "App.hpp"

#include &lt;msclr/gcroot.h&gt;
#include &lt;thread&gt;

int main() {
App *app = new App();

std::thread([&amp;] { app-&gt;run(); }).detach();

MainWindow ^ mainWindow = gcnew MainWindow(app);
mainWindow-&gt;ShowDialog();

return 0;
}</Codeblock>
  </details>

  <details>
    <summary>App.hpp</summary>
    <Codeblock lang="C++">#pragma once

#include &lt;msclr/gcroot.h&gt;
#include &lt;mute&gt;

ref class ChildWindow;

class App {
private:
std::mutex _mutex;
msclr::gcroot&lt;ChildWindow ^&gt; _childWindow;
bool isChildWindowActive(void);
void updateChildWindow(void);

public:
App(void);
void run(void);
void onMainWindowMinimized(void);
void onMainWindowUnMinimized(void);
};</Codeblock>
  </details>

  <details>
    <summary>App.cpp</summary>
    <Codeblock lang="C++">#include "ChildWindow.hpp"

#include "App.hpp"

#include &lt;Windows.h&gt;

App::App(void) : _mutex(), _childWindow(nullptr) {}

bool App::isChildWindowActive(void) {
return !System::Object::ReferenceEquals(_childWindow, nullptr) &amp;&amp; !_childWindow-&gt;IsDisposed;
}

void App::updateChildWindow(void) {
System::Console::WriteLine("[ debug ] App::updateChildWindow(): entry");
std::lock_guard&lt;std::mutex&gt; lk(_mutex);
System::Console::WriteLine("[ debug ] App::updateChildWindow(): start");

if (isChildWindowActive()) {
  _childWindow-&gt;Update();
}

System::Console::WriteLine("[ debug ] App::updateChildWindow(): end");
}

void App::run(void) {
while (true) {
  Sleep(2000);
  System::Console::WriteLine("[ debug ] App::run()");
  updateChildWindow();
}
}

void App::onMainWindowMinimized(void) {
std::lock_guard&lt;std::mutex&gt; lk(_mutex);

if (!isChildWindowActive()) {
  _childWindow = gcnew ChildWindow();
}
_childWindow-&gt;Show();
}

void App::onMainWindowUnMinimized(void) {
System::Console::WriteLine("[ debug ] App::onMainWindowUnMinimized(): entry");
std::lock_guard&lt;std::mutex&gt; lk(_mutex);
System::Console::WriteLine("[ debug ] App::onMainWindowUnMinimized(): start");

if (isChildWindowActive()) {
  _childWindow-&gt;Close();
}

System::Console::WriteLine("[ debug ] App::onMainWindowUnMinimized(): end");
}</Codeblock>
  </details>

  <details>
    <summary>MainWindow.hpp</summary>
    <Codeblock lang="C++">#pragma once

#include "App.hpp"

#using &lt;System.dll&gt;
#using &lt;System.Windows.Forms.dll&gt;
#using &lt;System.Drawing.dll&gt;

public ref class MainWindow : public System::Windows::Forms::Form {
public:
MainWindow(void) : app(nullptr) {
  initializeComponent();
}
MainWindow(App *app) : app(app) {
  initializeComponent();
}
~MainWindow() {
  if (components) delete components;
}

private:
System::ComponentModel::Container ^ components;
App *app;

void initializeComponent(void) {
  this-&gt;components = gcnew System::ComponentModel::Container();
  this-&gt;Size = System::Drawing::Size(300, 200);
  this-&gt;Text = "Main Window";
  this-&gt;Resize += gcnew System::EventHandler(this, &amp;MainWindow::onResized);
}
void onResized(Object ^ sender, System::EventArgs ^ e) {
  if (this-&gt;app == nullptr) {
    System::Console::WriteLine("[ warning ] MainWindow::onResize(): app is nullptr.");
    return;
  }
  if (this-&gt;WindowState == System::Windows::Forms::FormWindowState::Minimized)
    app-&gt;onMainWindowMinimized();
  else
    app-&gt;onMainWindowUnMinimized();
}
};</Codeblock>
  </details>

  <details>
    <summary>ChildWindow.h</summary>
    <Codeblock lang="C++">#pragma once

#include "App.hpp"

#include &lt;Windows.h&gt;

#using &lt;System.dll&gt;
#using &lt;System.Windows.Forms.dll&gt;
#using &lt;System.Drawing.dll&gt;

public ref class ChildWindow : public System::Windows::Forms::Form {
public:
ChildWindow(void) {
  initializeComponent();
}
~ChildWindow() {
  if (components) delete components;
}
void Update(void) {
  System::Console::WriteLine("[ debug ] ChildWindow::Update(): before invoke 1");
  this-&gt;Invoke(gcnew System::Action(this, &amp;ChildWindow::updateInner));
  System::Console::WriteLine("[ debug ] ChildWindow::Update(): after invoke 1");
  Sleep(1000);
  System::Console::WriteLine("[ debug ] ChildWindow::Update(): before invoke 2");
  this-&gt;Invoke(gcnew System::Action(this, &amp;ChildWindow::updateInner));
  System::Console::WriteLine("[ debug ] ChildWindow::Update(): after invoke 2");
}

private:
System::ComponentModel::Container ^ components;

void initializeComponent(void) {
  this-&gt;components = gcnew System::ComponentModel::Container();
  this-&gt;Size = System::Drawing::Size(100, 100);
  this-&gt;Text = "Child Window";
}
void updateInner(void) {
  System::Console::WriteLine("[ debug ] ChildWindow::updateInner()");
}
};</Codeblock>
  </details>

  <h2>デッドロック</h2>

  <p>
    上のコードは、実験を容易に行うために、以下の仕様を持っている。
  </p>

  <ul>
    <li>Appは2秒に一度ChildWindow::Update()を呼び出す</li>
    <li>ChildWindow::Update()は二回ChildWindow::updateInner()をInvokeする</li>
    <li>Invokeの一回目と二回目との間には1秒のインターバルがある</li>
  </ul>

  <p>
    MainWindowを最小化てChildWindowを表示した後、一回目のInvokeの後、二回目のInvokeの前に、MainWindowを表示してChildWindowを閉じると、次のメッセージでデッドロックが発生する。
  </p>

  <Codeblock>[ debug ] App::run()
[ debug ] App::updateChildWindow(): entry
[ debug ] App::updateChildWindow(): start
[ debug ] ChildWindow::Update(): before invoke 1
[ debug ] ChildWindow::updateInner()
[ debug ] ChildWindow::Update(): after invoke 1
[ debug ] App::onMainWindowUnMinimized(): entry
[ debug ] ChildWindow::Update(): before invoke 2</Codeblock>

  <p>
    想定では、Update指示中のClose指示は待機され、Update指示が完了するとClose指示が走る。
    しかし実際は、Close指示の待機はされているが、Update指示中のInvokeでスタックし、Update指示が永遠に完了しないのである。
  </p>

  <h2>スレッド系</h2>

  <p>
    <b>MainWindowからの指示はすべてMainWindowのスレッド系に存在する</b>。
  </p>

  <p>
    私は、どのスレッドからであろうと、フォームを開くと、フォームごとにスレッドを持つものだと思っていた。
    従って、MainWindow→App→ChildWindowの指示も、ChildWindowにとっては「外部」からの指示であると思っていた。
  </p>

  <p>
    しかし実際は、MainWindow→App::onMainWindowMinimized()において、<b>ChildWindowはMainWindowのスレッド系に生成される</b>。
    だから、MainWindow→App::onMainWindowUnMinimized()で、ChildWindowを直接Closeできるのである。
  </p>

  <p>
    このことに気を付けると、以下の順序でデッドロックが起こっていることがわかる。
  </p>

  <CImage src="https://img.skdassoc.work/posts/cppcli-invoke-deadlock/02.svg" caption="デッドロックが起きるアクティビティ図" width="70%" />

  <p>
    ChildWindow::updateInnerは、App::_mutexのロック解除を待機しているわけではない。
    MainThreadが既に待機状態であるから、待機しているのである。
  </p>

  <h2>解決策</h2>

  <p>
    簡単な解決策は、App::onMainWindowUnMinimized()での待機を別スレッドで行うことである。
    すると、以下のようになり、デッドロックは起こらない。
  </p>

  <CImage src="https://img.skdassoc.work/posts/cppcli-invoke-deadlock/03.svg" caption="デッドロックが起きないアクティビティ図" width="70%" />

  <Tombstone />

  <hr>

  <Deadline key="cppcli-invoke-deadlock" />
</CBody>

</html>